package application;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Random;
import java.util.Scanner;

import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.sound.midi.Soundbank;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ColorPicker;
import javafx.scene.control.Label;
import javafx.scene.control.MenuButton;
import javafx.scene.control.MenuItem;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import javafx.stage.FileChooser;
import javafx.stage.Stage;

public class Main extends Application {

	CaesarCipher caesarCipher = new CaesarCipher();
	DESSimple des;
	DESSimple aes;
	FileChooser fileChooser = new FileChooser();
	DESSimple keyDes;
	DESSimple keyAes;
	SecretKey myDESKey;
	SecretKey myAESKey;
	ArrayList<ConfigSetting> settings = new ArrayList<ConfigSetting>();
	String chosenSetting;
	int codeLength = 4;

	VBox vb = new VBox();

	static Connection connection;
	static Statement statement;
	Stage primaryStage;

	static final String Caesar_cipher = "Caesar cipher";
	static final String DES_STRING = "DES algorithm";
	static final String AES_STRING = "AES algorithm";

	@Override
	public void start(Stage primaryStage) {
		try {
			this.primaryStage = primaryStage;

			primaryStage.setTitle("Security Application");

			vb.setPadding(new Insets(100));
			vb.setAlignment(Pos.CENTER);
			vb.setSpacing(10);
			login();

			primaryStage.setHeight(500);
			primaryStage.setWidth(500);

			primaryStage.setScene(new Scene(vb));

			primaryStage.show();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	String option = "choose algorithm";
	TextField enField = new TextField();
	TextField outputField = new TextField();
	TextField nameField = new TextField();
	ConfigSetting configSetting = new ConfigSetting();

	public void doEncryption() {
		vb.getChildren().clear();
		ColorPicker colorPicker = new ColorPicker();
		colorPicker.setPromptText("choose color");
		colorPicker.setOnAction(e2 -> {
			Color value = colorPicker.getValue();
			vb.setBackground(new Background(new BackgroundFill(value, null, null)));
			configSetting.setStrColor(value.getRed() + "," + value.getGreen() + "," + value.getBlue());
		});

		enField.setPromptText("please input the text you want to encrypt");
		outputField.setPromptText("encrypted result");
		nameField.setPromptText("name of the encrypted document");
		TextField key = new TextField();
		key.setPromptText("please input the key");
		TextField codeTextField = new TextField();
		codeTextField.setPromptText("code");
		Text codeText = new Text(
				"The code is generated by the system and is the key to decryption,\n please keep it in mind!");

		MenuButton algorithms = new MenuButton();
		algorithms.setText(option);
		MenuItem option1 = new MenuItem(Caesar_cipher);
		MenuItem option2 = new MenuItem(DES_STRING);
		MenuItem option3 = new MenuItem(AES_STRING);
		CheckBox defaultAl = new CheckBox("set algorithm as default");
		algorithms.getItems().addAll(option1, option2, option3);

		option1.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				option = option1.getText();
				algorithms.setText(option);
				key.setPromptText("please input the key");
			}
		});
		option2.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				option = option2.getText();
				algorithms.setText(option);
				key.setPromptText("the key will be generated automatically");
			}
		});
		option3.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				option = option3.getText();
				algorithms.setText(option);
				key.setPromptText("the key will be generated automatically");
			}
		});

		defaultAl.setOnAction(event -> {
			if (defaultAl.isSelected()) {
				configSetting.setDefaultAl(option);
				System.out.println("defaultAl " + option);
			}
		});
		Button submit = new Button("submit");
		Button goBack = new Button("Go Back");
		HBox hb = new HBox();
		hb.setAlignment(Pos.CENTER);
		hb.setSpacing(10);
		hb.getChildren().addAll(submit, goBack);
		TextField settingField = new TextField();
		settingField.setPromptText("name of this setting");
		Button saveSetting = new Button("save setting");
		HBox settingBox = new HBox();
		settingBox.setAlignment(Pos.CENTER);
		settingBox.setSpacing(10);
		settingBox.getChildren().addAll(settingField, saveSetting);

		MenuButton loadSetting = new MenuButton("load setting");
		getSettings();
		for (ConfigSetting s : settings) {
			MenuItem setingItem = new MenuItem(s.getName());
			setingItem.setOnAction(e1 -> {
				chosenSetting = setingItem.getText();
				loadSetting.setText(chosenSetting);
				configSetting.setName(chosenSetting);
				if (s.getDefaultAl() == "" || s.getDefaultAl() == null) {
					algorithms.setText("choose algorithm");
				} else {
					algorithms.setText(s.getDefaultAl());
				}
				String strColor = s.getStrColor();
				String[] colors = strColor.split(",");
				Color color = new Color(Double.parseDouble(colors[0]), Double.parseDouble(colors[1]),
						Double.parseDouble(colors[2]), 1);
				vb.setBackground(new Background(new BackgroundFill(color, null, null)));
			});
			loadSetting.getItems().add(setingItem);
		}

		saveSetting.setOnAction(e -> {
			if(defaultAl.isSelected()) {
				defaultAl.setSelected(false);
			}
			String settingName = settingField.getText();
			configSetting.setName(settingName);
			int i = saveSetting(configSetting);
			if (i == 1) {
				showAlert("save successfully!");
			}
			getSettings();
			loadSetting.getItems().clear();
			for (ConfigSetting s : settings) {
				MenuItem setingItem = new MenuItem(s.getName());
				setingItem.setOnAction(e1 -> {
					chosenSetting = setingItem.getText();
					loadSetting.setText(chosenSetting);
					configSetting.setName(chosenSetting);
					if (s.getDefaultAl() == "" || s.getDefaultAl() == null) {
						algorithms.setText("choose algorithm");
					} else {
						algorithms.setText(s.getDefaultAl());
					}
					String strColor = s.getStrColor();
					String[] colors = strColor.split(",");
					Color color = new Color(Double.parseDouble(colors[0]), Double.parseDouble(colors[1]),
							Double.parseDouble(colors[2]), 1);
					vb.setBackground(new Background(new BackgroundFill(color, null, null)));
				});
				loadSetting.getItems().add(setingItem);
			}
		});
		submit.setOnAction(new EventHandler<ActionEvent>() {
			public void handle(ActionEvent arg0) {
				String choseAlgorithm = algorithms.getText();
				String text = enField.getText();
				if (text == "") {
					showAlert("Text can not be empty!");
				} else if (choseAlgorithm == "choose algorithm") {
					showAlert("Please select the algorithm!");
				} else {
					String sampleAl;
					boolean duplicateName = isDuplicateName(nameField.getText());
					if (duplicateName) {
						showAlert("Name already exists!");
					} else {
						if (choseAlgorithm.equals(Caesar_cipher)) {
							sampleAl = "a";
							if (key.getText() == "") {
								showAlert("Key can not be empty!");
							} else {
								try {
									String code = generateCode(codeLength);
									codeTextField.setText(code);
//									algorithmString = Caesar_cipher;
									String encrypt = caesarCipher.encrypt(text, Integer.parseInt(key.getText()));
									outputField.setText(encrypt);
									// encrypt the code
									System.out.println("original code:"+code);
									String encryptCode = encryptPassword(code);
									// encryt the key
									int enCaeserKey = enCaeserKey(Integer.parseInt(key.getText()));
									System.out.println("encrypted key:" + enCaeserKey);
									int i = saveToDB(nameField.getText(), enCaeserKey, null, sampleAl, encrypt,
											encryptCode);
									if (i == 1) {
										showAlert("save successfully!");
									}
								} catch (NumberFormatException e) {
									showAlert("Key must be a number!");
								}
							}
						} else if (choseAlgorithm.equals(DES_STRING)) {
							sampleAl = "b";
							try {
								String code = generateCode(codeLength);
								codeTextField.setText(code);
								String msg = enField.getText();
								byte[] encText = des.encrypt(msg);
								String outputString = new String(Base64.getEncoder().encode(encText));
								byte[] keyBytes = des.getSecretkey().getEncoded();
								// encrypt the code
								System.out.println("original code:"+code);
								String encryptCode = encryptPassword(code);
								// encryt the key
								byte[] newKeyBytes = enDesKey(keyBytes);
								System.out.println("original:" + Arrays.toString(keyBytes));
								System.out.println("en:" + Arrays.toString(newKeyBytes));
								outputField.setText(outputString);
								key.setText(Arrays.toString(keyBytes));
								int i = saveToDB(nameField.getText(), 0, newKeyBytes, sampleAl, outputString,
										encryptCode);
								if (i == 1) {
									showAlert("save successfully!");
								}
							} catch (Exception e) {
								e.printStackTrace();
							}
						} else if (choseAlgorithm.equals(AES_STRING)) {
							sampleAl = "c";
							try {
								String code = generateCode(codeLength);
								codeTextField.setText(code);
								// encrypt the code
								System.out.println("original code:"+code);
								String encryptCode = encryptPassword(code);
								String msg = enField.getText();
								byte[] encText = aes.encrypt(msg);
								String outputString = new String(Base64.getEncoder().encode(encText));
								byte[] keyBytes = aes.getSecretkey().getEncoded();
								byte[] newKeyBytes = enDesKey(keyBytes);
								System.out.println("original key:" + Arrays.toString(keyBytes));
								System.out.println("encrypted key:" + Arrays.toString(newKeyBytes));
								outputField.setText(outputString);
								key.setText(Arrays.toString(keyBytes));
								int i = saveToDB(nameField.getText(), 0, newKeyBytes, sampleAl, outputString,
										encryptCode);
								if (i == 1) {
									showAlert("save successfully!");
								}
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					}
				}
			}
		});

		goBack.setOnAction(e -> funcPage());
		colorPicker.setPrefHeight(200);
		HBox hBox = new HBox();
		hBox.setAlignment(Pos.CENTER);
		hBox.setSpacing(10);
		hBox.getChildren().addAll(algorithms,defaultAl);
		vb.getChildren().addAll(colorPicker, hBox, nameField, enField, key, outputField, codeTextField,
				codeText, hb, settingBox, loadSetting);
	}

	TextField inField = new TextField();

	public void doDecryption() {
		vb.getChildren().clear();
		Text promp1 = new Text("the name or text of the encrypted document");
		Text promp2 = new Text("the code");
		TextField output = new TextField();
		output.setPromptText("decrypted text");
		TextField codeField = new TextField();
		Button submit = new Button("submit");
		Button goBack = new Button("Go Back");
		submit.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				String in = inField.getText();
				if (in == "" || codeField.getText() == "") {
					showAlert("Text/Name can not be empty!");
				} else {
					EncryptionInfo encryptionInfo = queryEncryptionInfo(in);
					try {
						String codeStr =  encryptPassword(codeField.getText());;
						if (encryptionInfo == null || !(encryptionInfo.getCode().equals(codeStr))) {
							showAlert("Invalid name or code!");
						} else {
							String algorithm = encryptionInfo.getAlgorithm();
							// ceasar cipher
							if (algorithm.equalsIgnoreCase("a")) {
								int deCaeserKey = deCaeserKey(encryptionInfo.getCaesar_key());
								String decrypt = caesarCipher.decrypt(encryptionInfo.getText(), deCaeserKey);
								output.setText(decrypt);
							} else if (algorithm.equalsIgnoreCase("b")) {
								// DES decryption
								try {
									byte[] des_key = encryptionInfo.getDes_key();
									// decrypt the key
									byte[] desKey = deDesKey(des_key);
									System.out.println("en:" + Arrays.toString(des_key));
									System.out.println("origin" + Arrays.toString(desKey));

									SecretKey secretKey = new SecretKeySpec(desKey, 0, desKey.length, "DES");
									des.setSecretkey(secretKey);
									String decrypt = des.decrypt(Base64.getDecoder().decode(encryptionInfo.getText()));
									output.setText(decrypt);
								} catch (Exception e) {
									e.printStackTrace();
								}
								// AES
							} else if (algorithm.equalsIgnoreCase("c")) {
								try {
									byte[] des_key = encryptionInfo.getDes_key();
									System.out.println("en:" + Arrays.toString(des_key));
									byte[] deDesKey = deDesKey(des_key);
									SecretKey secretKey = new SecretKeySpec(deDesKey, 0, deDesKey.length, "AES");
									aes.setSecretkey(secretKey);
									String decrypt = aes.decrypt(Base64.getDecoder().decode(encryptionInfo.getText()));
									output.setText(decrypt);
								} catch (Exception e) {
									e.printStackTrace();
								}
							}
						}
					} catch (NumberFormatException e) {
						e.printStackTrace();
					}
				}
			}
		});

		goBack.setOnAction(e -> funcPage());
		vb.getChildren().addAll(promp1, inField, promp2, codeField, output, submit, goBack);
	}

	private void showAlert(String msg) {
		Alert alert = new Alert(AlertType.INFORMATION);
		alert.setHeaderText(msg);
		alert.showAndWait();
	}

	public void login() {
		vb.getChildren().clear();
		Label usernameLabel = new Label("username");
		TextField uField = new TextField();
		Label passwordLabel = new Label("password");
		PasswordField pField = new PasswordField();
		Button submit = new Button("submit");

		submit.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				String username = uField.getText();
				String pwd = pField.getText();
				if (username == "" || pwd == "") {
					showAlert("username/password can not be empty!");
				} else {
					String enPwd = encryptPassword(pwd);
					User user = queryUser(username, enPwd);
					if (user == null) {
						showAlert("Invalid username or password!");
					} else {
						funcPage();
					}
				}
			}
		});

		vb.getChildren().addAll(usernameLabel, uField, passwordLabel, pField, submit);
	}

	public void funcPage() {
		vb.getChildren().clear();
		Button inputEn = new Button("Input Encryption");
		Button inputDe = new Button("Input Decryption");

		Button fileEn = new Button("File Encryption");
		Button fileDe = new Button("File Decryption");
		Button exitButton = new Button("Exit");

		fileEn.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				fileEncryption();
			}
		});

		fileDe.setOnAction(new EventHandler<ActionEvent>() {
			public void handle(ActionEvent arg0) {
				fileDecryption();
			}
		});
		inputEn.setOnAction(new EventHandler<ActionEvent>() {
			public void handle(ActionEvent arg0) {
				doEncryption();
			}
		});

		inputDe.setOnAction(new EventHandler<ActionEvent>() {
			public void handle(ActionEvent arg0) {
				doDecryption();
			}
		});

		exitButton.setOnAction(new EventHandler<ActionEvent>() {
			public void handle(ActionEvent arg0) {
				login();
			}
		});

		vb.getChildren().addAll(inputEn, inputDe, fileEn, fileDe, exitButton);
	}

	// the decrypted text from the file
	String textString;
	// the key from the file
	String keyString;

	protected void fileDecryption() {
		vb.getChildren().clear();
		Button uploadFile = new Button("Upload file");
		Button uploadKey = new Button("Upload Key");
		Button submit = new Button("submit");
		Button back = new Button("go back");
		MenuButton algorithms = new MenuButton();
		algorithms.setText("choose algorithm");
		MenuItem option1 = new MenuItem(Caesar_cipher);
		MenuItem option2 = new MenuItem(DES_STRING);
		MenuItem option3 = new MenuItem(AES_STRING);
		algorithms.getItems().addAll(option1, option2, option3);

		option1.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				option = option1.getText();
				algorithms.setText(option);
			}
		});
		option2.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				option = option2.getText();
				algorithms.setText(option);
			}
		});
		option3.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				option = option3.getText();
				algorithms.setText(option);
			}
		});
		TextField fileName = new TextField("Chosen file: ");
		uploadFile.setOnAction(e -> {
			File selectedFile = fileChooser.showOpenDialog(primaryStage);
			if (selectedFile != null) {
				System.out.println("Selected File: " + selectedFile.getAbsolutePath());
				textString = readFile(selectedFile);
				showAlert("upload successfully!");
				fileName.setText("Chosen file: " + selectedFile.getName());
			} else {
				System.out.println("No file selected.");
			}
		});
		TextField keyName = new TextField("Chosen key: ");

		uploadKey.setOnAction(e -> {
			File selectedFile = fileChooser.showOpenDialog(primaryStage);
			if (selectedFile != null) {
				System.out.println("Selected File: " + selectedFile.getAbsolutePath());
				keyString = readFile(selectedFile);
				showAlert("upload successfully!");
				keyName.setText("Chosen key: " + selectedFile.getName());
			} else {
				System.out.println("No file selected.");
			}
		});

		submit.setOnAction(e -> {
			String chosenAlgorithm = algorithms.getText();
			if (chosenAlgorithm.equalsIgnoreCase(Caesar_cipher)) {
				int keyInt = Integer.parseInt(keyString);
				int deKey = deCaeserKey(keyInt);
				String decrypt = caesarCipher.decrypt(textString, deKey);
				File file = fileChooser.showSaveDialog(primaryStage);
				writeToFile(decrypt, file);
			} else if (chosenAlgorithm.equalsIgnoreCase(DES_STRING)) {
				try {
					// decrypt the key
					System.out.println("keyString:" + keyString);
					String decryptKey = decryptKeyString(keyString, 1);
					System.out.println("dec:" + decryptKey);
					byte[] desKey = Base64.getDecoder().decode(decryptKey);
//					System.out.println(Arrays.toString(desKey));
					// decrypt the text
					SecretKey secretKey = new SecretKeySpec(desKey, 0, desKey.length, "DES");
					des.setSecretkey(secretKey);
					String decrypt = des.decrypt(Base64.getDecoder().decode(textString));
					writeToFile(decrypt, fileChooser.showSaveDialog(primaryStage));
				} catch (Exception ex) {
					ex.printStackTrace();
				}
			} else if (chosenAlgorithm.equalsIgnoreCase(AES_STRING)) {
				try {
					// decrypt the key
					System.out.println("keyString:" + keyString);
					String decryptKey = decryptKeyString(keyString, 2);
					System.out.println("aec:" + decryptKey);
					byte[] desKey = Base64.getDecoder().decode(decryptKey);
//					System.out.println(Arrays.toString(desKey));
					// decrypt the text
					SecretKey secretKey = new SecretKeySpec(desKey, 0, desKey.length, "AES");
					aes.setSecretkey(secretKey);
					String decrypt = aes.decrypt(Base64.getDecoder().decode(textString));
					writeToFile(decrypt, fileChooser.showSaveDialog(primaryStage));
				} catch (Exception ex) {
					ex.printStackTrace();
				}
			} else {
				showAlert("please choose one algorithm");
			}
		});

		back.setOnAction(e -> {
			funcPage();
		});
		vb.getChildren().addAll(uploadFile, fileName, uploadKey, keyName, algorithms, submit, back);
	}

	String text;
	String chosenAlgorithm;

	protected void fileEncryption() {
		vb.getChildren().clear();
		Button uploadFile = new Button("Upload file");
		Button submit = new Button("submit");
		Button back = new Button("go back");
		Button saveKey = new Button("save key");
		TextField keyField = new TextField();
		Label label = new Label("key");
		keyField.setPromptText("Only input the key when using Caesar");
		TextField fileName = new TextField("Chosen file: ");
		MenuButton algorithms = new MenuButton();
		algorithms.setText("choose algorithm");
		MenuItem option1 = new MenuItem(Caesar_cipher);
		MenuItem option2 = new MenuItem(DES_STRING);
		MenuItem option3 = new MenuItem(AES_STRING);
		algorithms.getItems().addAll(option1, option2, option3);

		option1.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				option = option1.getText();
				algorithms.setText(option);
			}
		});
		option2.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				option = option2.getText();
				algorithms.setText(option);
			}
		});
		option3.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent arg0) {
				option = option3.getText();
				algorithms.setText(option);
			}
		});

		uploadFile.setOnAction(e -> {
			File selectedFile = fileChooser.showOpenDialog(primaryStage);
			if (selectedFile != null) {
				System.out.println("Selected File: " + selectedFile.getAbsolutePath());
				text = readFile(selectedFile);
				showAlert("upload successfully!");
				fileName.setText("Chosen file: " + selectedFile.getName());
			} else {
				System.out.println("No file selected.");
			}
		});

		submit.setOnAction(e -> {
			chosenAlgorithm = algorithms.getText();
			if (chosenAlgorithm.equalsIgnoreCase(Caesar_cipher)) {
				try {
					int keyInt = Integer.parseInt(keyField.getText());
					String encrypt = caesarCipher.encrypt(text, keyInt);
					File saveFile = fileChooser.showSaveDialog(primaryStage);
					writeToFile(encrypt, saveFile);
				} catch (Exception e2) {
					showAlert("key must be a number!");
				}
			} else if (chosenAlgorithm.equalsIgnoreCase(DES_STRING)) {
				try {
					// get the keyString from the secrectKey
					byte[] bytes = des.getSecretkey().getEncoded();
					String keyString = Base64.getEncoder().encodeToString(bytes);
					// encrypt the keyString
					System.out.println("origin: " + keyString);
					String enKeyString = encryptKeyString(keyString, 1);
					keyField.setText(enKeyString);
					// encrypt the text
					byte[] encrypt = des.encrypt(text);
					String outputString = new String(Base64.getEncoder().encode(encrypt));
					writeToFile(outputString, fileChooser.showSaveDialog(primaryStage));
				} catch (Exception ee) {
					ee.printStackTrace();
				}

			} else if (chosenAlgorithm.equalsIgnoreCase(AES_STRING)) {
				try {
					// get the keyString from the secrectKey
					byte[] bytes = aes.getSecretkey().getEncoded();
					String keyString = Base64.getEncoder().encodeToString(bytes);
					// encrypt the keyString
					System.out.println("origin: " + keyString);
					String enKeyString = encryptKeyString(keyString, 2);
					keyField.setText(enKeyString);
					// encrypt the text
					byte[] encrypt = aes.encrypt(text);
					String outputString = new String(Base64.getEncoder().encode(encrypt));
					writeToFile(outputString, fileChooser.showSaveDialog(primaryStage));
				} catch (Exception ex) {
					ex.printStackTrace();
				}
			} else {
				showAlert("please choose one algorithm");
			}
		});

		saveKey.setOnAction(e -> {
			chosenAlgorithm = algorithms.getText();
			if (chosenAlgorithm.equalsIgnoreCase(Caesar_cipher)) {
				int key = enCaeserKey(Integer.parseInt(keyField.getText()));
				writeToFile(key + "", fileChooser.showSaveDialog(primaryStage));
			} else if (chosenAlgorithm.equals(AES_STRING) || chosenAlgorithm.equals(DES_STRING)) {
				String keyString = keyField.getText();
				writeToFile(keyString, fileChooser.showSaveDialog(primaryStage));
			}
		});

		back.setOnAction(e -> {
			funcPage();
		});
		vb.getChildren().addAll(uploadFile, fileName, algorithms, label, keyField, saveKey, submit, back);
	}

	private void writeToFile(String content, File destination) {
		try {
			FileOutputStream fos = new FileOutputStream(destination);
			fos.write(content.getBytes());
			showAlert("File written successfully!");
			fos.close();
		} catch (Exception e) {
		}
	}

	private String readFile(File file) {
		StringBuilder content = new StringBuilder();

		try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
			String line;
			while ((line = reader.readLine()) != null) {
				content.append(line);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return content.toString();
	}

	public User queryUser(String username, String password) {
		String sql = "SELECT * FROM users where username = ? and password = ?";
		User user = null;
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, username);
			preparedStatement.setString(2, password);
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				int id = resultSet.getInt("id");
				String name = resultSet.getString("username");
				String pass = resultSet.getString("password");
				user = new User(id, name, pass);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return user;
	}

	public EncryptionInfo queryEncryptionInfo(String s) {
		String sql = "SELECT * FROM encryption where name = ?";
		EncryptionInfo encryptionInfo = null;
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, s);
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				int id = resultSet.getInt("id");
				String name = resultSet.getString("name");
				int caesar_key = resultSet.getInt("a_key");
				byte[] des_key = resultSet.getBytes("b_key");
				String algorithm = resultSet.getString("algorithm");
				String text = resultSet.getString("text");
				String code = resultSet.getString("code");
				if (algorithm.equals("a")) {
					encryptionInfo = new EncryptionInfo(id, name, caesar_key, null, algorithm, text, code);
				} else if (algorithm.equals("b") || algorithm.equals("c")) {
					encryptionInfo = new EncryptionInfo(id, name, 0, des_key, algorithm, text, code);
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return encryptionInfo;
	}

	public boolean isDuplicateName(String name) {
		String sql = "SELECT * FROM encryption where name = ?";
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, name);
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				return true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}

	public int saveSetting(ConfigSetting configSetting) {
		String sql = "INSERT INTO settings (name,strColor,defaultAl) VALUES (?,?,?)";
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, configSetting.getName());
			preparedStatement.setString(2, configSetting.getStrColor());
			preparedStatement.setString(3, configSetting.getDefaultAl());
			return preparedStatement.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
	}

	public int saveToDB(String name, int c_key, byte[] d_key, String choseAlgorithm, String text, String code) {
		String sql = "INSERT INTO encryption (name, a_key,b_key, algorithm, text,code) VALUES (?,?,?,?,?,?)";
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, name);
			if (choseAlgorithm.equalsIgnoreCase("a")) {
				preparedStatement.setInt(2, c_key);
				preparedStatement.setBytes(3, null);
			} else if (choseAlgorithm.equalsIgnoreCase("b") || choseAlgorithm.equalsIgnoreCase("c")) {
				preparedStatement.setInt(2, 0);
				preparedStatement.setBytes(3, d_key);
			}
			preparedStatement.setString(4, choseAlgorithm);
			preparedStatement.setString(5, text);
			preparedStatement.setString(6, code);
			return preparedStatement.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
	}

	public static void connectDB() {
		String filePath = "jdbc.txt";
		String url = "";
		String username = "";
		String pwd = "";
		try {
			Scanner scanner = new Scanner(new File(filePath));
			while (scanner.hasNextLine()) {
				String line = scanner.nextLine();
				if (line.equalsIgnoreCase("JDBC_URL")) {
					url = scanner.nextLine();
				} else if (line.equalsIgnoreCase("USERNAME")) {
					username = scanner.nextLine();
				} else if (line.equalsIgnoreCase("PWD")) {
					pwd = scanner.nextLine();
				}
			}
			scanner.close();
			Class.forName("com.mysql.cj.jdbc.Driver");
			connection = DriverManager.getConnection(url, username, pwd);
			statement = connection.createStatement();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public int deCaeserKey(int key) {
		return (key + 33) / 13 - 25;
	}

	public int enCaeserKey(int key) {
		return (key + 25) * 13 - 33;
	}

	public byte[] deDesKey(byte[] key) {
		byte[] originKey = new byte[key.length];
		for (int i = 0; i < key.length; i++) {
			if (key[i] == -128) {
				originKey[i] = -128;
			} else {
				originKey[i] = (byte) (key[i] * (-1));
			}
		}
		return reverseByteArray(originKey);
	}

	public byte[] enDesKey(byte[] key) {
		byte[] newKey = new byte[key.length];
		for (int i = 0; i < key.length; i++) {
			if (key[i] == -128) {
				newKey[i] = -128;
			} else {
				newKey[i] = (byte) (key[i] * (-1));
			}
		}
		return reverseByteArray(newKey);
	}

	private byte[] reverseByteArray(byte[] array) {
		int left = 0;
		int right = array.length - 1;
		while (left < right) {
			byte temp = array[left];
			array[left] = array[right];
			array[right] = temp;
			left++;
			right--;
		}
		return array;
	}

	public String encryptPassword(String password) {
		try {
			MessageDigest md = MessageDigest.getInstance("MD5");
			byte[] messageDigest = md.digest(password.getBytes());

			StringBuilder hexString = new StringBuilder();
			for (byte b : messageDigest) {
				hexString.append(String.format("%02x", b));
			}

			return hexString.toString();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			return null;
		}
	}

	public static void main(String[] args) {
		connectDB();
		launch(args);
	}

	public Main() {
		try {
			des = new DESSimple("DES");
			aes = new DESSimple("AES");
			keyDes = new DESSimple("DES");
			keyAes = new DESSimple("AES");
			generateMyDESKey();
			generateMyAESKey();
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
	}

	public void getSettings() {
		String sql = "SELECT * from settings";
		settings.clear();
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				ConfigSetting c = new ConfigSetting();
				c.setId(resultSet.getInt("id"));
				c.setName(resultSet.getString("name"));
				c.setStrColor(resultSet.getString("strColor"));
				c.setDefaultAl(resultSet.getString("defaultAl"));
				settings.add(c);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public String encryptKeyString(String text, int type) {
		String key = "";
		try {
			if (type == 1) {
				keyDes.setSecretkey(myDESKey);
				byte[] encrypt = keyDes.encrypt(text);
				key = Base64.getEncoder().encodeToString(encrypt);
			} else if (type == 2) {
				keyAes.setSecretkey(myAESKey);
				byte[] encrypt = keyAes.encrypt(text);
				key = Base64.getEncoder().encodeToString(encrypt);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return key;
	}

	public String decryptKeyString(String text, int type) {
		String key = "";

		try {
			if (type == 1) {
				keyDes.setSecretkey(myDESKey);
				byte[] decode = Base64.getDecoder().decode(text);
				key = keyDes.decrypt(decode);
			} else if (type == 2) {
				keyAes.setSecretkey(myAESKey);
				byte[] decode = Base64.getDecoder().decode(text);
				key = keyAes.decrypt(decode);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return key;
	}

	public void generateMyDESKey() {
		byte[] desKey = { -31, -72, 103, -14, 45, -6, 47, 81 };
		try {
			myDESKey = new SecretKeySpec(desKey, 0, desKey.length, "DES");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void generateMyAESKey() {
		byte[] aesKey = { -56, 48, 91, -102, -83, -45, 72, -43, 117, -34, 50, -19, 64, 91, -7, 38 };
		try {
			myAESKey = new SecretKeySpec(aesKey, 0, aesKey.length, "AES");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	 private String generateCode(int length) {
	        String characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	        Random random = new Random();
	        StringBuilder sb = new StringBuilder(length);
	        for (int i = 0; i < length; i++) {
	            int randomIndex = random.nextInt(characters.length());
	            char randomChar = characters.charAt(randomIndex);
	            sb.append(randomChar);
	        }
	        return sb.toString();
	    }
}
